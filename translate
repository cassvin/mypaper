使用MVC设计模式开发网络应用程序

摘要

MVC设计模式非常利于开发交互式软件系统。这种设计模式是分层独立的，因为它是从一个交互式应用的角度来表达问题的。采用MVC模式能推动工程师们在设计阶段尽早将应用系统分层。系统分层随之带来应用程序实现上的变化————尽管应用程序的逻辑层并不会变。这篇论文介绍开发弹性web应用程序分层的理念，编程模型以及能让开发者应用MVC设计模式的相关基础设施。应用程序是在同一设备上开发和测试的；然后他们可以被部署到多台client/server架构的设备上。除此以外，我们可以在不修改应用程序的前提下改变程序的分层。

1. 介绍
1.1 MVC设计模式

著名的MVC设计模式是设计交互式软件系统的一种非常有效的方式。MVC又可以称为“表现/抽象/控制”模式，它的核心理念是把用户接口从数据表示中分离出来。经典的MVC设计模式最早应用于低级别用户交互，比如一个按键，一次鼠标单击。在MVC中，V——即视图曾负责展示信息给用户，而C——控制层则负责处理用户交互行为，包括应用程序的用户接口。M——模型层包含了视图层代表的信息以及用于响应用户行为的逻辑。PAC设计模式将程序逻辑和用户界面解耦。在这里，MVC中的视图层和控制层是被包含进表现层；程序的数据是抽象层；而控制层负责表现层和抽象层之间的通信。利用MVC和PAC设计模式能够更加轻松地开发和维护应用程序，理由如下：
  程序界面能够在不改变数据结构和商业逻辑的前提下改变。
  程序能够很轻松的维护各种不同的接口，比如说多语言，或者用户权限的不同设置。


通俗来讲，MVC这个概念已经被延伸到用于描述被控制层所驱动的应用程序的模型的改变。而该控制层不仅仅是用于接受及处理用户交互，同时也负责处理用户交互过程中所产生的事件。为了处理模型层的改变，控制层初始化了应用程序新的试图。这篇论文从MVC模型的角度解释这个更加PAC化，商业逻辑和前台逻辑以及请求处理各自分离的应用程序。

1.2 web应用程序和MVC设计模式

web应用程序，像其他交互式软件系统，能够层MVC的架构设计中得益。比如说，有一种Java开发模式使用EJB作为Model层，HTML和JSP作为View层，然后将servlets和session EJBs作为Controller层。

使用MVC设计模式用于开发web应用程序的问题在于它会使应用程序的客户端和服务器端内在的分离开。客户端表现View层；而Model层和Controller层能够通过很多方法在客户端和服务端之间分离开。开发者必须预先分离web应用程序————当然这会是在实现阶段，但经常最早也会在设计阶段发生。相反的，MVC是分区独立的：Model层，View层和Controller层在各自的空间运行而不会引起分区问题。由于地点独立性问题并不能影响架构和设计决策，分区独立是MVC的一个特性。不幸的是，分区意味着web应用程序是位置独立的，而这个特性意味着在web应用程序中更难采用MVC设计模式。

当然了，开发者们能够简单的为web应用程序分区，比如方法A会在服务器上运行和方法B则在客户端上。一旦分区，MVC设计模式能够被运用以并发式地实现应用程序的客户端和服务器端部分。这个方法的问题在于我们不可能在设计阶段便正确分区，因为这些觉得取决于应用的需求，而需求在整个项目阶段中都会发生变化。情况更坏的是正确的分区还有赖于静态的和动态的环境。在分区问题未能很好解决的环境中采用MVC设计模式是一项困难的任务。

更糟糕的是，“Controller层独立”通常不是开发过程中的一个独立的，可协调的特性。比起函数作为应用程序内在的特性，分区取决于一些与应用程序无关的技术决策。举例来说，“瘦客户端”对“胖客户端”。通常而言，程序的开发者在选择实现技术上会受月素。可能他们被告诫说“applets不好因为他们很笨重以及不安全”。也有可能他们被告诫说“你不能通过html构建一个成熟的页面”。一旦技术方案定下来，他们能够自主决定应用程序如何被分层。当部署成为瘦客户端时，应用程序只有View层是在客户端的；Controller层和Model层是在服务器端上的。当部署成为一个“胖客户端”时，应用程序的Model层和Controller也在客户端上。技术方案的选择，从某种角度来说，意味着开发者不能够做出正确的分层决策————即使他们知道正确的方法是怎么样的。

总而言之，web应用程序采用MVC设计模式的时机是：
1. 知道如何正确的分层
2. 有可用的技术方案与分层方案兼容。

实践中，开发者会通过针对技术方案和分层方案设计验证方案以简化问题。这种方法将会在后边阐述（3.2.3节）

我们介绍了灵活的web应用程序分层以使web应用程序能够更加自然地应用MVC设计模式的理念。在我们讨论fwap和其他相关的东西之前，我们先引入一个简单的web应用程序分层方法。


2. 通过实例讲解如何为web应用程序分层

假设我们要开发一个web应用程序以获取公司职员的信息。为了简化，我们之允许客户端执行两种操作。

1. 输入名字，单击“查找”按钮（在名字目录中）。搜索结果会返回一组符合搜索条件的员工缩略记录。

2. 单击“细节”按钮，能够获取到某指定职员的详细信息。

在独立单一的空间环境中实现这么一个系统是比较简单的。从MVC设计模式的角度来看：
Model包含了员工目录的记录；
有四个View：一个“搜索”面板，用户显示一组员工记录的缩略信息的区域；用于显示指定用户详细信息的区域；通知没有符合搜索条件的员工。

有两个Controller：给定一个“search”命令，此时会驱动model进行查询并返回结果；另外一个是，给定一个“details”，model会进行查询从而返回指定员工的全部信息。

然而，在client/server环境中实现一个web应用程序会引起分层问题，理论上来说是正交的但实际上非常复杂当采用了MVC设计模式。现在我们有两个controller，应用程序可以采用四种方法中的一种来实现。两个controller都运行在客户端或者都在服务器端，或者其中一个在客户端而另外一个在服务器端。每一种分层设计都有很大地影响程序实现的方法。举例来说。假如两个controller都运行在客户端上（“胖客户端”模式），那么整个model都必须被下载到客户端————而这种方式看起来是很不切实际的。如果两个controller都运行在服务器端（“瘦客户端”模式），那么每次客户端搜索员工以及获取详细信息时客户端和服务器端都会经历两轮通信。

实际上，对于很多环境来说，瘦客户端模式和胖客户端模式都不尽理想。取而代之的，我们可以使用多重MVC，将controller分布到客户端和服务端上。特别地，“search”这个controller运行在服务端上，与它相关的model包含了完整的员工目录。然后，当返回相对较少的员工记录时，contorller会返回每一个员工的完整记录，这样子的花他们可以被客户端这边的model维护。双重MVC允许客户端处理要求详细员工信息的请求，因此消除了客户端和服务端之间的交互。

当然了，我们实际想要的是避免实现应用程序时的分层，因为正确的分层方法取决于那些扑朔迷离的因素。举例来说，假如员工目录相对比较小，


